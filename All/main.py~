# -*- coding: utf-8 -*-
#CODIGO DA MAIN DO PROJETO

import anydbm
import pickle 
import getpass
import sys
import smtplib
from email.mime.text import MIMEText

from SendEmail import SendEmail 


class Administrador (object):

	def __init__(self,login_adm, senha_adm): #construtor
		self._login = login_adm
		self._senha = senha_adm 
		self.db_emails = anydbm.open('emails.db', 'c')	# DB PARA EMAIL CADASTRADOS
		self.db_login = anydbm.open('login_cadastrado.db', 'c')

	def verifica_login (self):
		if self._login in self.db_login and self.db_login[self._login] == self._senha: return True
		else: return False
			

	def cadastra_usuario (self, matricula, email, alimentacao):
	#cadastra um novo comensal(aluno) na lista de emails e recebe se é carnívoro ou vegetariano, retorna 1 caso 	seja cadastrado ou 0 caso já esteja na lista '''

		if matricula not in self.db_emails:
			#transforma a lista [email, alimentacao] em string e armazena no db
			self.db_emails[matricula] = pickle.dumps([email, alimentacao])
			return True
		else:
			return False

	def altera_usuario(self, matricula, novo_email, nova_alimentacao):
	#altera email e alimentação do aluno 
		if matricula in self.db_emails:  #se alterar retorna 1, se a matricula n estiver cadastrada retorna 0
			#transforma a informação armazenada em forma de string no seu tipo original 
			dados = pickle.loads(self.db_emails[matricula])
			dados[0],dados[1] = novo_email, nova_alimentacao	
			#após substituição, o tipo de dado será transformado em string e armazenado
			self.db_emails[matricula] = pickle.dumps[dados]				
			return True 
	
		else: return False
			

	def remove_usuario (self, matricula): 
		if matricula in self.db_emails: 
			del self.db_emails[matricula]
			return True
		return False

	def retorna_email(self):
		emails = []
		for key in self.db_emails:
			dados = pickle.loads(self.db_emails[key])
			emails.append(dados[0])
		return emails

	def estatisticas(self):
		#retorna a quantidade de cadastrados, de vegetarianos e carnívoros
		veg, carn = 0,0
		for usuarios in self.db_emails: 
			dado = pickle.loads(self.db_emails[usuarios])
			if dado[1] == 'vegetariano': veg += 1
			else: carn += 1
		return veg, carn

	def __str__(self): 
		a = ''
		print 'Matricula\tEmail\t\tAlimentação'	
		print '________________________________________________________________'
		for matricula in self.db_emails: 
			email = (pickle.loads(self.db_emails[matricula]))
			a +=  '%s\t%s\t%s\n' %(matricula,email[0],email[1])
		return a
	







def clear():  #PARA LIMPAR TELA DO TERMINAL 
    try:
        import os
        lines = os.get_terminal_size().lines
    except AttributeError:
        lines = 130
    print("\n" * lines)

def tela_principal ():
	print '1.\tCADASTRAR USUÁRIO' 
	print '2.\tATUALIZAR USUÁRIO'
	print '3.\tREMOVER USUÁRIO'
	print '4.\tIMPRIMIR EMAILS'
	print '5.\tENVIA EMAILS'
	print '6.\tSAIR.'
	

def main ():

	while True: 
		#Realiza o login do adminstrador	
		print '\tBEM VINDO AO PROJETO DE P1'
		print '\tPARA COMEÇAR, POR FAVOR INSIRA SUAS CREDENCIAIS'
		login = raw_input('LOGIN: ')
		senha = getpass.getpass('SENHA: ')
		adm = Administrador(login, senha)
		if adm.verifica_login(): 
			#se o login for válido, irá instanciar um objeto de SendEmail
			envia = SendEmail(login,senha) 
			break
		else: 
			print 'Login e/ou senha inválida. Tente novamente.'
			clear()
	
	while True: 
		clear()
		tela_principal()
		opcao = int(raw_input('OPÇÃO: '))
				
		if opcao == 1: 
			while True: 
				print 'Para finalizar, digite "encerrar" no campo de matricula'
				matricula = raw_input('MATRICULA: ')
				if matricula == 'encerrar': break
				email = raw_input('EMAIL: ')
				alimentacao = raw_input('Vegetariana ou Carnivora: ')
				if adm.cadastra_usuario(matricula, email, alimentacao):
					print 'USUÁRIO CADASTRADO COM SUCESSO.'
				else: 
					print 'USUÁRIO JÁ CONSTA NOS NOSSOS REGISTROS.'

		elif opcao == 2: 
			matricula = raw_input('MATRICULA: ')
			email = raw_input('Novo Email: ')
			alimentacao = raw_input('Nova Alimentação ')
			if adm.altera_usuario(matricula, email, alimentacao):
				print 'Alteração realizada com sucesso.'
			else: 
				print 'Matricula não cadastrada.'
			
		elif opcao == 3: 
			print 'Insira a matricula do usuário que você quer remover do DB'
			matricula = raw_input('MATRICULA: ')
			if adm.remove_usuario(matricula): 
				print 'Usuário removido com sucesso'
			else: 
				print 'Falha.Matricula não cadastrada'
	
		elif opcao == 4:
			print adm
			
			
		

		elif opcao == 5:
			print 'Por favor aguarde enquanto a conexão é estabelecida'
			if envia.conexao(): print 'Conexão realizada com sucesso'
			emails = adm.retorna_email()
			mensagem = raw_input('Digite sua mensagem: ')
			subject = raw_input('Digite o assunto da msg: ')
			i = 0			
			for end in emails:
				envia.send_mail(end, subject, mensagem)
				print '%d email enviado' %i
				

			envia.close_connection()

		elif opcao == 6: clear(); exit()


main ()			
			
	

					 

